

@model SSS.Property.Setups.Product_Property
@{
    ViewBag.Title = "";
    Layout = null;
}

<form id="addnewform">
    @Html.HiddenFor(model => model.idx, new { id = "natureOfVisitField", value = 0 })
    <div class="row">
        <div class="col-sm-4">
            <!-- text input -->
            <div class="form-group">
                <label>Product Type *:</label>
                @Html.DropDownListFor(model => model.productTypeIdx, new SelectList(ViewBag.productTypeLST, "idx", "productType"), "Select ProductType ", new { @Class = "form-control font-weight-bold" })
                @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
            </div>
            @Html.ValidationMessageFor(model => model.productTypeIdx, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <!-- text input -->
            <div class="form-group">
                <label>Category *:</label>
                @Html.DropDownListFor(model => model.productCatIdx, new SelectList(ViewBag.catLST, "idx", "category"), "Select Category ", new { @Class = "form-control font-weight-bold" })
                @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
            </div>
            @Html.ValidationMessageFor(model => model.productCatIdx, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <!-- text input -->
            <div class="form-group">
                <label>Sub-Category*:</label>
                @Html.DropDownListFor(model => model.productSubCatIdx, new SelectList(ViewBag.subCatLST, "idx", "subCategory"), "Select Sub-Category ", new { @Class = "form-control font-weight-bold" })
                @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
            </div>
            @Html.ValidationMessageFor(model => model.productSubCatIdx, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            <div class="form-group">
                <label>HS-CODE*:</label>
                @Html.EditorFor(model => model.HSCODE, new { htmlAttributes = new { @placeholder = "HS-Code", @class = "form-control" ,@readonly="true"} })
            </div>
            @Html.ValidationMessageFor(model => model.HSCODE, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label>Item Code*:</label>
                @Html.EditorFor(model => model.itemCode, new { htmlAttributes = new { @placeholder = "Item Code", @class = "form-control", @readonly = "true" } })
            </div>
            @Html.ValidationMessageFor(model => model.itemCode, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label>Item Name*:</label>
                @Html.EditorFor(model => model.itemName, new { htmlAttributes = new { @placeholder = "Item Name", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.itemName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            <!-- text input -->
            <div class="form-group">
                <label>Unit*:</label>
                @Html.DropDownListFor(model => model.unitIdx, new SelectList(ViewBag.unitLST, "idx", "itemUnit"), "Select Unit ", new { @Class = "form-control font-weight-bold" })
                @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
            </div>
            @Html.ValidationMessageFor(model => model.unitIdx, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label>Description*:</label>
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
        </div>
        
    </div>
    <div class="row">
        <div class="col-sm-4">
            <div class="form-group">
                <label>Cost Price*:</label>
                @Html.EditorFor(model => model.costPrice, new { htmlAttributes = new { @placeholder = "Cost Price", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.costPrice, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label>Sale Price*:</label>
                @Html.EditorFor(model => model.salePrice, new { htmlAttributes = new { @placeholder = "Sales Price", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.salePrice, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label>Product Tax*:</label>
                @Html.EditorFor(model => model.productTax, new { htmlAttributes = new { @placeholder = "Product Tax", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.productTax, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row" id="PurchaseDetails">
        <div class="col-md-12">
            <div class="card card-primary">
                <div class="card-header">
                    <h5>+Add Product</h5>
                    <div class="card-tools">

                    </div>
                </div>
                <div class="">
                    <table class="table table-striped table-bordered table-condensed table-hover table-active">
                        <thead class="thead-dark">
                            <tr>
                                <th>Item Name</th>
                                <th>QTY</th>                                
                                 <th>Action</th>
                            </tr>

                        </thead>
                        <tbody class="" style="background:white;">
                            <tr>
                                <td>@Html.DropDownListFor(model => model.productIdx, new SelectList(Model.ProductLST, "idx", "itemName"), "Select Product", new { @Class = "form-control font-weight-bold" })</td>

                                <td>@Html.EditorFor(model => model.qty, new { htmlAttributes = new { @placeholder = "Qty", @class = "form-control" } })</td>
                                
                                <td>


                                    <input type="button" value="+" id="btnaddtogrid" class="btn btn-outline-primary" style="font-size: 20px " />

                                </td>

                            </tr>

                        </tbody>
                    </table>

                    <div class="row" style="display:block; overflow:scroll" id="milestones">
                        <div class="col-md-12">
                            <div class="card card-primary">

                                <div class="">
                                    <table id="example2" class="table table-dark table-bordered table-hover">

                                        <tbody style="background:white;color:black; ">


                                        </tbody>
                                    </table>

                                </div>

                                <!-- /.card-body -->
                            </div>
                            <!-- /.card -->
                        </div>

                    </div>

                </div>
            </div>


            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>

</form>

<script type="text/javascript">
    $(document).ready(function () {
        $('#PurchaseDetails').hide();
        $('#example2 tbody').empty();
    });
    $("#productTypeIdx").change(function () {
        var type = $('#productTypeIdx').val();
        if (type == 1)
        {
            $('#PurchaseDetails').hide();
            $('#example2 tbody').empty();
        }
        else if (type == 2) {
            $('#PurchaseDetails').show();
        }
        else
        {
            $('#PurchaseDetails').hide();
            $('#example2 tbody').empty();
        }

    })
    $("#btnaddtogrid").click(function (e) {
        if (!(gridValidation($("#productIdx option:selected").val()))) {
            // alert("Product Alreaty Exist")
            displayerror();
            return;
        }


        // alert("hello");
        $('#milestones').show();
        var closebutton = '<input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="fa fa-window-close close" />';
  
        var productname = $("#productIdx option:selected").text();
        var ProductID = $("#productIdx option:selected").val();
        var Qty = $("#qty").val();
       
       
        var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + closebutton + "</td></tr>";
       
        $("#example2 tbody").append(markup);
       


    });
    function gridValidation(Id) {
        errmsg = [];
        var myTab = $("#example2 tbody");
        var rtrn = true;

        // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
        myTab.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text();

            if (Id == productid) {
                rtrn = false;
                errmsg.push("Product Already exist");
            }
        })
        if ($('#productIdx option:selected').val() == '') {
            rtrn = false;
            errmsg.push("Select Product");
        }
        if ($('#qty').val() <= 0) {
            rtrn = false;
            errmsg.push("Qty value is zero");
        }
       
     
        return rtrn;
    }
    function displayerror() {
        for (var i = 0; i < errmsg.length; i++) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            Command: toastr["error"](errmsg[i], "")
        }
    }
    var cattext, subcattext;
    $("#productCatIdx").change(function () {
       cattext = $("#productCatIdx option:selected").text();
       GenerateHSCode();
    })
    $("#productSubCatIdx").change(function () {
        subcattext = $("#productSubCatIdx option:selected").text();
        GenerateHSCode();
    })

    function GenerateHSCode() {

        $("#HSCODE").val(cattext+"-"+subcattext);
    }
</script>
